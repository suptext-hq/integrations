# https://blog.liblab.com/using-github-graphql-api-with-github-actions
# https://gitprotect.io/blog/optimizing-github-actions-with-github-graphql-api/#Setting_up_GitHub_GraphQL_API_with_GitHub_Actions
# https://stackoverflow.com/questions/77528848/github-graphql-api-how-to-retrieve-issues-project-items/77799377#77799377
# https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects

# Note: GITHUB_TOKEN is scoped to the repository level and cannot access projects. To access projects you can either create a GitHub App (recommended for organization projects) or a personal access token (recommended for user projects)..
# https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions#github-actions-workflows

name: Get project IDs
on:
  workflow_dispatch:

jobs:
  logProjectIDs:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.SUPTEXT_AUTH_ID }}
          private-key: ${{ secrets.SUPTEXT_AUTH_PEM }}
          
      - uses: octokit/graphql-action@v2.x
        id: get_project_ids
        env:
        # GITHUB_TOKEN: ${{ secrets.GH_READ_PROJECTS }}
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        with:
          query: |
             query($org: String!) {
                organization(login: $org) {
                  projectsV2(last: 100,orderBy: {field:CREATED_AT,direction:DESC}) {
                    nodes {
                      id
                      title
                    }
                  }
                }
              }
          variables: |
            org: ${{ github.repository_owner }}
            repo: ${{ github.event.repository.name }}
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: "echo '${{ steps.get_project_ids.outputs.data }}'"

      - run: |
          # Parse JSON output and set environment variables
          echo "PROJECT_IDS=($(jq -r '.data.organization.projectsV2.nodes[].id' <<< "${{steps.get_project_ids.outputs.data}}"))" >> $GITHUB_ENV
          echo "PROJECT_TITLES=($(jq -r '.data.organization.projectsV2.nodes[].title' <<< "${{steps.get_project_ids.outputs.data}}"))" >> $GITHUB_ENV

      - run: |
          # Verify the environment variables were set correctly
          echo "Project IDs: ${{ env.PROJECT_IDS }}"
          echo "Project Titles: ${{ env.PROJECT_TITLES }}"

